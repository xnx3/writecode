package {java.package};

import com.xnx3.j2ee.service.SqlService;
import com.xnx3.j2ee.util.ActionLogUtil;
import com.xnx3.j2ee.util.Page;
import com.xnx3.j2ee.util.Sql;
import com.xnx3.j2ee.vo.BaseVO;
import com.xnx3.wangmarket.shop.core.entity.CarouselImage;
import com.xnx3.wangmarket.shop.store.vo.CarouselImageListVO;
import com.xnx3.wangmarket.shop.store.vo.CarouselImageVO;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.util.List;

/**
 * {database.table.comment}
 * @author <a href="https://github.com/xnx3/writecode">WriteCode自动生成</a>
 */
@Controller(value="{database.table.name.hump.upper}Controller")
@RequestMapping("/shop/store/api/carouselImage/")
public class {database.table.name.hump.upper}Controller extends BaseController {
	@Resource
	private SqlService sqlService;
	
	/**
	 * 列表信息
	 * @param token 当前操作用户的登录标识
     *           <p>可通过 <a href="xxxxx.html">/xxxx/login.json</a> 取得 </p>
     * @param everyNumber 每页显示多少条数据。取值 1～100，
     *                  <p>最大显示100条数据，若传入超过100，则只会返回100条<p>
     *                  <p>若不传，默认显示15条</p>
	 * @return 若成功，则返回列表数据
	 * @author <a href="https://github.com/xnx3/writecode">WriteCode自动生成</a>
	 */
	@ResponseBody
	@RequestMapping(value = "/list.json" ,method = {RequestMethod.POST})
	public {database.table.name.hump.upper}ListVO list(HttpServletRequest request,
			@RequestParam(value = "everyNumber", required = false, defaultValue = "15") int everyNumber) {
		{database.table.name.hump.upper}ListVO vo = new {database.table.name.hump.upper}ListVO();

		//创建Sql
		Sql sql = new Sql(request);
		//配置查询那个表
		sql.setSearchTable("{database.table.name}");
		//增加更多查询条件
		//sql.appendWhere("storeid = "+getStoreId());
		//查询条件-配置按某个字端搜索内容
		//sql.setSearchColumn(new String[] {"name","type"});
		// 查询数据表的记录总条数
		int count = sqlService.count("{database.table.name}", sql.getWhere());
		
		// 配置每页显示多少条，进行分页，取得分页信息
		Page page = new Page(count, everyNumber, request);
		// 查询出总页数
		sql.setSelectFromAndPage("SELECT * FROM {database.table.name} ", page);
		//选择排序方式 当用户没有选择排序方式时，系统默认 主键 ASC 排序
		//sql.setDefaultOrderBy("id DESC");
		
		// 按照上方条件查询出该实体总数 用集合来装
		List<{database.table.name.hump.upper}> list = sqlService.findBySql(sql,{database.table.name.hump.upper}.class);
		
		vo.setList(list);
		vo.setPage(page);
		//日志记录
		ActionLogUtil.insert(request, "查看轮播图列表");
		return vo;
	}
	
	/**
	 * 获取某条的数据
	 * @param token 当前操作用户的登录标识 <required>
     *           <a href="xxxxx.html">/xxxx/login.json</a> 取得 </p>
     * @param id 主键
     * @return 若成功，则可获取此条信息
	 * @author <a href="https://github.com/xnx3/writecode">WriteCode自动生成</a>
	 * 
	 */
	@ResponseBody
	@RequestMapping(value="/get{database.table.name.hump.upper}.json" ,method = {RequestMethod.POST})
	public {database.table.name.hump.upper}VO get{database.table.name.hump.upper}(HttpServletRequest request,
									 @RequestParam(value = "id", required = false, defaultValue = "0") int id) {
		{database.table.name.hump.upper}VO vo = new {database.table.name.hump.upper}VO();

		if(id != 0) {
			{database.table.name.hump.upper} carouselImage = sqlService.findById({database.table.name.hump.upper}.class, id);
			if(carouselImage == null){
				vo.setBaseVO(BaseVO.FAILURE, "要修改的信息不存在");
				return vo;
			}
			vo.set{database.table.name.hump.upper}(carouselImage);
			ActionLogUtil.insert(request, "获取{database.table.name.hump.upper}.id为"+id+"的信息", carouselImage.toString());
		}else {
			vo.setBaseVO(BaseVO.FAILURE, "请传入id");
			return vo;
		}
		
		return vo;
		
	}
	
	/**
	 * 添加或修改一条记录
	 * @param token 当前操作用户的登录标识 <required>
     *           <a href="xxxxx.html">/xxxx/login.json</a> 取得 </p>
     * @return 若请求成功，则可添加修改轮播图          
	 * @author <a href="https://github.com/xnx3/writecode">WriteCode自动生成</a>
	 */
	@ResponseBody
	@RequestMapping(value="/save.json" ,method = {RequestMethod.POST})
	public BaseVO save(HttpServletRequest request,CarouselImage carouselImage) {
		Integer id = carouselImage.getId();
		//创建一个实体
		{database.table.name.hump.upper} fCarouselImage;
		if(id == null) {
			// 添加
			fCarouselImage = new {database.table.name.hump.upper}();
			fCarouselImage.setStoreid(getStoreId());
		}else {
			//修改
			fCarouselImage = sqlService.findById({database.table.name.hump.upper}.class, id);
			if(fCarouselImage == null) {
				return error("根据ID,没查到该轮播图");
			}
			if(fCarouselImage.getStoreid() - getStoreId() != 0){
				return error("轮播图不属于你，无法保存");
			}
		}
		
		//给实体赋值
		fCarouselImage.setName(carouselImage.getName());
		fCarouselImage.setRank(carouselImage.getRank());
		fCarouselImage.setType(carouselImage.getType());
		fCarouselImage.setImgValue(carouselImage.getImgValue());
		fCarouselImage.setImageUrl(carouselImage.getImageUrl());
		
		//保存实体
		sqlService.save(fCarouselImage);
		
		//日志记录
		if(id == null) {
			ActionLogUtil.insertUpdateDatabase(request, "向{database.table.name.hump.upper}新增一条记录", fCarouselImage.toString());
		}else{
			ActionLogUtil.insertUpdateDatabase(request, "修改"+{database.table.name.hump.upper}.id为"+id+"的记录",fCarouselImage.toString());
		}
		
		return success(fCarouselImage.getId()+"");
	}
	
	/**
	 * 删除记录
	 * @param id 要删除的记录的id
	 * @param token 当前操作用户的登录标识 <required>
     *           <a href="xxxxx.html">/xxxx/login.json</a> 取得 </p>
	 * @return 若成功，则可以删除成功
	 * @author <a href="https://github.com/xnx3/writecode">WriteCode自动生成</a>
	 */
	@ResponseBody
	@RequestMapping(value="/delete.json",method = {RequestMethod.POST})
	public BaseVO delete(HttpServletRequest request,
			@RequestParam(value = "id",defaultValue = "0", required = false) int id) {
		if(id < 1) {
			return error("请传入id参数");
		}
		
		{database.table.name.hump.upper} carouselImage = sqlService.findById({database.table.name.hump.upper}.class, id);
		if(carouselImage == null) {
			return error("要删除的记录不存在");
		}
		//if(carouselImage.getStoreid() - getStoreId() != 0){
		//	return error("轮播图不属于你，无法删除");
		//}
		
		sqlService.delete(carouselImage);
		//日志记录
		ActionLogUtil.insertUpdateDatabase(request, id, "删除"+{database.table.name.hump.upper}.id为"+id+"的记录",carouselImage.toString());
		return success();
	}
}