package {java.package}.controller;

import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.xnx3.j2ee.controller.BaseController;
import com.xnx3.j2ee.service.SqlService;
import com.xnx3.j2ee.util.ActionLogUtil;
import com.xnx3.j2ee.util.Page;
import com.xnx3.j2ee.util.Sql;
import com.xnx3.j2ee.vo.BaseVO;
import {java.package}.entity.{database.table.name.hump.upper};
import {java.package}.vo.{database.table.name.hump.upper}ListVO;
import {java.package}.vo.{database.table.name.hump.upper}VO;

/**
 * {database.table.comment}
 * @author <a href="https://github.com/xnx3/writecode">WriteCode自动生成</a>
 */
@Controller(value = "{database.table.name.hump.upper}Controller")
@RequestMapping("{project.url.path}{database.table.name.hump.lower}/")
public class {database.table.name.hump.upper}Controller extends BaseController {

	@Resource
	private SqlService sqlService;
	
	/**
	 * 列表信息
	 * @param token 当前操作用户的登录标识
	 * 			<p>可通过 <a href="xxxxx.html">/xxxx/login.json</a> 取得</p>
	 * @param everyNumber 每页显示多少条数据。取值 1～100，
	 * 			<p>最大显示100条数据，若传入超过100，则只会返回100条<p>
	 * 			<p>若不传，默认显示15条</p>
	 * @return 若成功，则返回列表数据
	 * @author <a href="https://github.com/xnx3/writecode">WriteCode自动生成</a>
	 */
	@ResponseBody
	@RequestMapping(value = "list.json", method = {RequestMethod.POST})
	public {database.table.name.hump.upper}ListVO list(HttpServletRequest request,
			@RequestParam(value = "everyNumber", required = false, defaultValue = "15") int everyNumber) {
		{database.table.name.hump.upper}ListVO vo = new {database.table.name.hump.upper}ListVO();

		// 创建Sql
		Sql sql = new Sql(request);
		// 配置查询那个表
		sql.setSearchTable("{database.table.name}");
		// 增加更多查询条件
		//sql.appendWhere("xxx = " + xxx);
		// 查询条件-配置按某个字端搜索内容
		sql.setSearchColumn(new String[] {{codeblock.field.list.search}"{database.table.field.name}", {/codeblock.field.list.search}"xxxxxxx"});
		// 查询数据表的记录总条数
		int count = sqlService.count("{database.table.name}", sql.getWhere());
		
		// 配置每页显示多少条，进行分页，取得分页信息
		Page page = new Page(count, everyNumber, request);
		// 查询出总页数
		sql.setSelectFromAndPage("SELECT * FROM {database.table.name} ", page);
		// 选择排序方式 当用户没有选择排序方式时，系统默认 主键 ASC 排序
		//sql.setDefaultOrderBy("id DESC");
		
		// 按照上方条件查询出该实体总数 用集合来装
		List<{database.table.name.hump.upper}> list = sqlService.findBySql(sql, {database.table.name.hump.upper}.class);
		
		vo.set{database.table.name.hump.upper}List(list);
		vo.setPage(page);
		
		// 日志记录
		ActionLogUtil.insert(request, "查看 {database.table.comment} 列表");
		
		return vo;
	}
	
	/**
	 * 获取某条的数据
	 * @param token 当前操作用户的登录标识 <required>
	 * 			<a href="xxxxx.html">/xxxx/login.json</a> 取得</p>
	 * @param id 主键
	 * @return 若成功，则可获取此条信息
	 * @author <a href="https://github.com/xnx3/writecode">WriteCode自动生成</a>
	 */
	@ResponseBody
	@RequestMapping(value = "details.json", method = {RequestMethod.POST})
	public {database.table.name.hump.upper}VO details(HttpServletRequest request,
			@RequestParam(value = "id", required = false, defaultValue = "0") int id) {
		{database.table.name.hump.upper}VO vo = new {database.table.name.hump.upper}VO();

		if(id != 0) {
			{database.table.name.hump.upper} entity = sqlService.findById({database.table.name.hump.upper}.class, id);
			if(entity == null){
				vo.setBaseVO(BaseVO.FAILURE, "要修改的信息不存在");
				return vo;
			}
			vo.set{database.table.name.hump.upper}(entity);
			ActionLogUtil.insert(request, "获取 {database.table.name}.id 为 " + id + " 的信息", entity.toString());
		}else {
			vo.setBaseVO(BaseVO.FAILURE, "请传入id");
			return vo;
		}
		
		return vo;
	}
	
	/**
	 * 添加或修改一条记录
	 * @param token 当前操作用户的登录标识 <required>
	 * 			<a href="xxxxx.html">/xxxx/login.json</a> 取得</p>{codeblock.field.edit}
	 * @param {database.table.field.name.hump.lower} {database.table.field.comment}{/codeblock.field.edit}
	 * @return 保存结果
	 * @author <a href="https://github.com/xnx3/writecode">WriteCode自动生成</a>
	 */
	@ResponseBody
	@RequestMapping(value = "save.json", method = {RequestMethod.POST})
	public BaseVO save(
			//@RequestParam(value = "id", required = false, defaultValue="0") int id,
{codeblock.field.edit}			@RequestParam(value = "{database.table.field.name.hump.lower}", required = false) {database.table.field.datatype.java} {database.table.field.name.hump.lower},
{/codeblock.field.edit}			HttpServletRequest request) {
		// 创建一个实体
		{database.table.name.hump.upper} entity;
		if(id == null || id - 0 == 0) {
			// 添加
			entity = new {database.table.name.hump.upper}();
		} else {
			// 修改
			entity = sqlService.findById({database.table.name.hump.upper}.class, id);
			if(entity == null) {
				return error("根据id，没查到该信息");
			}
		}
		
		// 给实体赋值
		{codeblock.field.edit}entity.set{database.table.field.name.hump.upper}({database.table.field.name.hump.lower});
			{/codeblock.field.edit}
		// 保存实体
		sqlService.save(entity);
		
		// 日志记录
		if(id == null) {
			ActionLogUtil.insertUpdateDatabase(request, "向 {database.table.name} 新增一条记录", entity.toString());
		}else{
			ActionLogUtil.insertUpdateDatabase(request, "修改 {database.table.name}.id 为 " + id + " 的记录", entity.toString());
		}
		
		return success(entity.getId()+"");
	}
	
	/**
	 * 删除记录
	 * @param id 要删除的记录的id
	 * @param token 当前操作用户的登录标识 <required>
	 * 			<a href="xxxxx.html">/xxxx/login.json</a> 取得</p>
	 * @return 若成功，则可以删除成功
	 * @author <a href="https://github.com/xnx3/writecode">WriteCode自动生成</a>
	 */
	@ResponseBody
	@RequestMapping(value = "delete.json", method = {RequestMethod.POST})
	public BaseVO delete(HttpServletRequest request,
			@RequestParam(value = "id", required = false, defaultValue = "0") int id) {
			
		/*
		 *
		 * 1. 这里是物理
		 * 2. 要判断是否具有删除权利
		 *
		 */
			
		if(id - 0 <= 0) {
			return error("请传入id");
		}
		
		{database.table.name.hump.upper} entity = sqlService.findById({database.table.name.hump.upper}.class, id);
		if(entity == null) {
			return error("要删除的记录不存在");
		}
		
		
		sqlService.delete(entity);
		
		// 日志记录
		ActionLogUtil.insertUpdateDatabase(request, id, "删除 {database.table.name}.id 为 " + id + " 的记录", entity.toString());
		
		return success();
	}
	
}